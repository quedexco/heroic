#!/usr/bin/env python
import os
import sys
import subprocess as sp
import contextlib
import unittest
import importlib
import argparse

parser = argparse.ArgumentParser(description='Run Heroic Integration Tests')
parser.add_argument('--debug', help='Enable Debugging Output', dest='debug',
                    action='store_const', const=True, default=False)

parser.add_argument('pattern', help='Pattern of tests to run', nargs='?',
                    default="")

parser.add_argument('--java-opts', help='Extra Java Options',
                    dest='java_opts', default=[],
                    type=lambda v: v.split(' '))

parser.add_argument('--java-debug', help='Enable Default Debugging Switches for Java',
                    dest='java_debug', default=False,
                    action='store_const', const=True)

parser.add_argument('--java-debug-port', help='Java Debug Port',
                    dest='java_debug_port', default=1044,
                    type=int)

parser.add_argument('--java-debug-suspend', help='Java Suspend on Debug',
                    dest='java_debug_suspend', default="n")

@contextlib.contextmanager
def in_dir(directory):
    original = os.getcwd()
    os.chdir(directory)

    try:
        yield
    finally:
        os.chdir(original)

def find_tests(tests, pattern):
    for d in os.listdir(tests):
        base, ext = os.path.splitext(d)

        if base.startswith('.') or ext != '.py' or base in ['__init__', 'helpers']:
            continue

        if pattern not in base:
            continue

        yield "tests.{}".format(base)

def main(program, args):
    ns = parser.parse_args(args)

    root = os.path.abspath(os.path.join(os.path.dirname(program), ".."))
    tests_dir = os.path.join(root, 'tests')

    build_root = os.path.dirname(root)
    pom_xml = os.path.join(build_root, 'pom.xml')
    heroic_jar = os.path.join(build_root, 'heroic-dist', 'target', 'heroic-dist-0.0.1-SNAPSHOT-shaded.jar')

    sys.path.append(root)

    # build heroic jar if necessary.
    if not os.path.isfile(heroic_jar):
        if not os.path.isfile(pom_xml):
            raise Exception("no such file: {}".format(pom_xml))

        with in_dir(build_root):
            sp.call(["mvn", "clean", "package",
                     "-D", "maven.test.skip=true",
                     "-D", "findbugs.skip=true",
                     "-D", "checkstyle.skip=true"])

    if not os.path.isfile(heroic_jar):
        raise Exception("no such jar: {}".format(pom_xml))

    java_opts = ns.java_opts

    if ns.java_debug:
        java_opts += [
            "-Xdebug",
            "-Xrunjdwp:transport=dt_socket,server=y,suspend={},address={}".format(
                ns.java_debug_suspend, ns.java_debug_port)]

    import tests.helpers as h
    h.setup(heroic_jar=heroic_jar, debug=ns.debug, java_opts=java_opts)

    loader = unittest.TestLoader()

    suites = []

    for test in find_tests(tests_dir, ns.pattern):
        m = importlib.import_module(test)
        suites.append(loader.loadTestsFromModule(m))

    runner = unittest.TextTestRunner(verbosity=2)

    results = []

    for suite in suites:
        results.append(runner.run(suite))

    if not all(r.errors == 0 for r in results):
        return 1

    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv[0], sys.argv[1:]))
