package com.spotify.heroic.metric.datastax.serialization.legacy;

import com.spotify.heroic.metric.datastax.MetricsRowKey;
import com.spotify.heroic.metric.datastax.TypeSerializer;
import com.spotify.heroic.metric.datastax.schema.legacy.MetricsRowKeySerializer;
import org.junit.Assert;
import org.junit.Test;

import java.io.IOException;
import java.nio.ByteBuffer;

public class RowKeySerializerTest {
    private static byte[] bytes(int... source) {
        final byte[] result = new byte[source.length];

        for (int i = 0; i < result.length; i++) {
            result[i] = (byte) (source[i] & 0xff);
        }

        return result;
    }

    private final byte[] bytes =
        bytes(0x0, 0xc3, 0x0, 0x7, 0x2, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x0, 0x0, 0xb6, 0x0,
            0x9, 0x0, 0x5, 0x2, 0x64, 0x69, 0x73, 0x6b, 0x0, 0x4, 0x2, 0x73, 0x64, 0x65, 0x0, 0x4,
            0x2, 0x65, 0x6e, 0x76, 0x0, 0xb, 0x2, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
            0x6f, 0x6e, 0x0, 0x5, 0x2, 0x68, 0x6f, 0x73, 0x74, 0x0, 0x27, 0x2, 0x6c, 0x6f, 0x6e,
            0x34, 0x2d, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x2d,
            0x62, 0x32, 0x34, 0x32, 0x2e, 0x6c, 0x6f, 0x6e, 0x34, 0x2e, 0x73, 0x70, 0x6f, 0x74,
            0x69, 0x66, 0x79, 0x2e, 0x6e, 0x65, 0x74, 0x0, 0xa, 0x2, 0x6f, 0x70, 0x65, 0x72, 0x61,
            0x74, 0x69, 0x6f, 0x6e, 0x0, 0x5, 0x2, 0x72, 0x65, 0x61, 0x64, 0x0, 0x4, 0x2, 0x70,
            0x6f, 0x64, 0x0, 0x5, 0x2, 0x6c, 0x6f, 0x6e, 0x34, 0x0, 0x5, 0x2, 0x72, 0x6f, 0x6c,
            0x65, 0x0, 0xc, 0x2, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x73, 0x6c, 0x61, 0x76, 0x65,
            0x0, 0x5, 0x2, 0x73, 0x69, 0x74, 0x65, 0x0, 0x4, 0x2, 0x6c, 0x6f, 0x6e, 0x0, 0x5, 0x2,
            0x75, 0x6e, 0x69, 0x74, 0x0, 0x3, 0x2, 0x6d, 0x73, 0x0, 0x5, 0x2, 0x77, 0x68, 0x61,
            0x74, 0x0, 0xd, 0x2, 0x69, 0x6f, 0x2d, 0x6f, 0x70, 0x73, 0x2d, 0x61, 0x77, 0x61, 0x69,
            0x74, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x1, 0x48, 0x0, 0x0, 0x0, 0x0, 0x0);

    @Test
    public void testRowKey() throws IOException {
        final ByteBuffer buffer = ByteBuffer.allocate(bytes.length);

        buffer.put(bytes);
        buffer.flip();

        final TypeSerializer<MetricsRowKey> rowKey = new MetricsRowKeySerializer();

        final MetricsRowKey key = rowKey.deserialize(buffer.asReadOnlyBuffer());
        final ByteBuffer result = rowKey.serialize(key);

        Assert.assertEquals(buffer, result);
    }
}
